
# currently its Time = O(N^3): 
# lets see if we can reduce this to N^2 with n^2 space


from collections import deque
from math import inf 

def maxSumAfterPartitioning1(arr, k):
    dpPrev = [x for x in arr]
    for i in range(1, len(arr)):
        dpPrev[i] = dpPrev[i] + dpPrev[i-1]

    dpCur = [0 for _ in range(len(arr))]
    for j in range(1, k + 1, 1):
        for i in range(len(dpCur)):
            # dpCur[i] = dpPrev[i]  
            for u in range(1, j+1):
                if i - u + 1 >= 0: 
                    newArr = arr[i - u + 1: i + 1]
                    maxNew = max(newArr)
                    y = dpCur[i - u] if i - u >= 0 else 0
                    dpCur[i] = max(dpCur[i], y + maxNew * u)
        if j < k: dpPrev, dpCur = dpCur, [0 for _ in range(len(arr))]
    return dpCur[-1]

# return the max element of subarray of length k (or less than k if youo're at the far left)
# where the 

def maxSubarray(arr, k):
    stack = deque()
    res = []
    # for i in range(k):
    #     while stack and arr[stack[-1]] < arr[i]: 
    #         stack.pop()
    #     stack.append(i)

    for i in range(len(arr)):
        if stack and stack[0] < i - k + 1: 
            stack.popleft()
        while stack and arr[stack[-1]] < arr[i]: 
            stack.pop()
        stack.append(i)
        res.append(arr[stack[0]])

    return res
# >   1,15,15, 9, 9, 5, 10
# arr = [1,15,7,9,2,5,10]
# [1, 4, 4, 5, 7, 7, 6, 6, 9, 9, 9]
# print(maxSubarray(arr, 3))


# needs massive refining below
def maxSumAfterPartitioning(arr, k):
    dp0 = [x for x in arr]
    for i in range(1, len(arr)):
        dp0[i] = dp0[i] + dp0[i-1]
    dp = [[x for x in dp0] for _ in range(k+1)]

    maxArr = []
    for i in range(1, k+1):
        curres = maxSubarray(arr, i+1)
        print(curres)
        maxArr.append(curres)

    # print("max arr: ", maxArr)
    # print("initial dp: ", dp)
    # dpCur = [0 for _ in range(len(arr))]
    for j in range(1, len(dp)):         # j spans k from 1 to k 
        for i in range(len(dp[0])):
            dp[j][i] = dp[j-1][i]
            for u in range(1, j+1):     # iterates from 1 to j 
                if i - u + 1 >= 0: 
                    maxNew = maxArr[u-1][i]
                    y = dp[j][i - u] if i - u >= 0 else 0
                    dp[j][i] = max(dp[j][i], y + maxNew * u)
        # if j < k: dpPrev, dpCur = dpCur, [0 for _ in range(len(arr))]
    print(dp)
    return dp[-1][-1]


def maxSumAfterPartitioning2(arr, k):
    dpPrev = [x for x in arr]
    for i in range(1, len(arr)):
        dpPrev[i] = dpPrev[i] + dpPrev[i-1]

    dpCur = [0 for _ in range(len(arr))]
    maxMemo = {}
    for j in range(1, k + 1, 1):
        for i in range(len(dpCur)):
            for u in range(1, j+1):
                if i - u + 1 >= 0: 
                    if (i - u + 1, i + 1) not in maxMemo: 
                        newArr = arr[i - u + 1: i + 1]
                        maxNew = max(newArr)
                        maxMemo[(i - u + 1, i + 1)] = maxNew
                    maxNew = maxMemo[(i - u + 1, i + 1)]
                    y = dpCur[i - u] if i - u >= 0 else 0
                    dpCur[i] = max(dpCur[i], y + maxNew * u)
        if j < k: dpPrev, dpCur = dpCur, [0 for _ in range(len(arr))]
    return dpCur[-1]

def maxSumAfterPartitioning3(arr, k):
    dpCur = [0 for _ in range(len(arr))]

    for i in range(len(dpCur)):
        for u in range(1, k+1):
            if i - u + 1 >= 0: 
                newArr = arr[i - u + 1: i + 1]
                
                maxNew = max(newArr)
                print("newArr: {}, maxNew: {}, i: {}, u: {}".format(newArr, maxNew, i, u))
                y = dpCur[i - u] if i - u >= 0 else 0
                dpCur[i] = max(dpCur[i], y + maxNew * u)
    print("dpCur:" , dpCur)
    return dpCur[-1]



arr = [1,15, 7, 9, 2, 5,10]
k = 2

print(maxSumAfterPartitioning3(arr,k))


# arr = [1,15, 7, 9, 2, 5,10]    
#       [1,16,23,32,34,39,49]             k = 1; sum
#       [1,30,37,38,55,60,75]             k = 2
# k = 2
# k = 3


# arr = [55]
# k = 1
# arr = [1,4,1,5,7,3,6,1,9,9,3]
# k = 4
# arr = [1,4,1,5,7,3,6,1,9,9,3]
# import time


# arr = [715301,25506,490661,157164,811431,252695,106886,591990,784150,886408,18182,41602,68573,325381,73935,950852,290720,939587,897877,277649,255105,733143,465301,758590,76918,189262,691204,914044,163488,179242,514233,158957,861771,829261,885936,23616,959166,292892,71841,8521,84194,521675,917985,321409,609,267560,202866,522747,115680,262205,957981,945246,851531,564445,809001,251004,824427,771618,365334,946236,126467,204637,113795,486317,344662,757654,205941,363764,721837,975975,932531,106155,655037,580373,163541,955467,546052,708129,176695,65870,101241,876814,358508,498084,394295,808209,483255,999499,253236,400168,172509,776100,731866,877071,885013,246004,699345,978112,512913,489656,961812,306254,816865,244584,907713,443235,44062,684279,493579,388063,398448,790694,807597,962839,744189,241602,195842,722313,134268,891009,947457,921436,866016,226451,604299,648750,225284,750725,350200,198522,230834,473457,467194,241227,713446,825765,448118,823681,731363,767357,455624,307815,361011,520734,65584,894274,202338,468300,752399,482382,215291,598937,911700,219051,27251,880642,576409,667272,783767,894052,988406,632934,28257,58127,554486,428852,402741,678114,373639,105396,574032,275825,372184,621967,848685,472513,754438,942404,276243,37838,628315,502215,422382,1580,453088,354343,309295,316443,395374,174355,791780,816548,327525,546883,836693,827871,38812,569370,649185,640709,375940,570874,389842,960618,459212,18317,244081,157503,660024,737004,507182,51871,398189,62602,5693,510647,569367,52948,30822,287234,560222,595430,748482,470528,663326,389139,330498,48740,982645,723276,731283,328908,13196,228799,680005,313197,171428,516544,341961,125284,335858,156123,997588,297277,535194,249356,284863,269800,73814,682294,119381,732886,378659,397097,663063,111534,808563,684328,40600,476653,666824,994367,720880,32609,870827,918483,735333,131324,34891,909366,89706,472968,691378,134094,960341,266515,693319,18049,459199,442429,920154,873039,849360,119963,546383,218746,34487,869831,188083,725459,530456,927439,581973,6649,88640,543428,541417,768450,424971,522978,931865,329981,601382,846060,938502,742610,400303,560366,153989,16651,435532,836685,341367,706823,305073,169338,63463]
# print(len(arr))
# k = 292

# arr = [902521,929337,135653,25733,499059,9732,665170,43114,624338,380363,940573,877796,333932,501641,77496,273830,198504,462338,45057,341924,972014,786806,624918,546640,766368,651562,165417,556316,492552,827057,296633,694705,246460,954892,897486,572346,126919,836874,791445,805142,469746,603189,552224,947188,316748,261137,269776,867711,435046,576477,354970,733321,384821,443633,777628,782302,195192,477857,660124,611053,63299,352962,725169,222418,876335,943323,711544,8358,669410,160206,538025,142742,522347,614663,419294,997945,661738,75703,276009,570937,433936,870422,625842,45499,638918,131782,781157,128639,582636,333424,847790,28887,401893,758150,934986,349861,316887,879097,176411,682343,1842,214530,145902,106699,616222,34094,513531,289718,471750,349475,427718,18823,681823,842519,420050,248317,842758,759344,556910,210515,977799,899969,958616,951886,228533,547385,65473,536599,289037,539543,86210,552028,740728,654831,63782,847547,150692,599214,335391,630496,566137,942638,505524,336879,491633,796606,358761,956731,104910,339148,296559,257450,858197,888617,699419,281781,708785,637499,862999,467278,768337,474401,232218,796981,917682,426715,345198,437374,436525,112330,907394,838122,706242,100176,822975,445352,208274,223830,128903,347827,819127,659175,555168,887186,528548,526876,418012,772167,198369,465926,283129,630273,819084,451136,332185,336459,790447,430931,338991,366675,346385,99754,130967,779180,676326,943708,377344,147538,97034,290522,721629,897792,623579,925928,675552,66447,623972,619814,772539,777718,13663,112326,251920,750371,180718,134165,109429,205441,66991,598841,385683,285470,519555,590943,474499,811561,944811,343392,302543,851955,721795,485218,447649,246333,227604,132270,108959,702917,595036,799173,970429,163375,921665,121522,191070,217372,979420,611986,473488,22425,707115,834439,682008,727292,688646,440527,726614,855024,430061,311122,526798,67788,257349,690378,461970,855282,288751,819382,152239,174899,163609,654323,422834,809827,21587,430792,303614,798354,286410,726240,124534,331160,676456,989149,692713,631722,604373,506507,204712,899528,624993,45747,781821,509043,381912,640631,465302,36412,41491,32428,794954,821586,783471,334549,344961,959373,900386,6082,560056,349601,339759,685183,769768,139974,836650,423917,16791,70138,65076,942543,345183,729379,954930,927192,685400,312629,169839,248403,322621,174729,587776,698151,508790,245505,183352,45118,224289,710999,353810,437749]
# k = 256

### sample call for main function
# start_time = time.time()

# end_time = time.time()
# elapsed_time = end_time - start_time
# print("elapsed time: ", elapsed_time)


# arr =  [1,4,1,5,7,3,6,1,9,9,3]
# arr1 = [4,4,7,7,7,9,9,9,9,9,9]
# print(sum(arr1))




        # print(j)
        # for u in range(0, j):
        #     partition = arr[i - j + 1 + u : i + u + 1]
        #     maxP = max(partition)
        #     partition = [maxP for _ in range(len(partition))]
            
        #     dp[y] = dpPrev[:i-j + 1 + u] + partition + dpPrev[i + u + 1:]
        #     y += 1